{"version":3,"sources":["common/SuperButton/SuperButton.module.scss","common/SuperCheckBox/SuperCheckBox.module.scss","common/SuperCheckBox/SuperCheckBox.tsx","common/SuperButton/SuperButton.tsx","common/SuperInput/SuperInput.tsx","component/Test/Test.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","redux/reducers/loginReducer.ts","redux/reducers/registrationReducer.ts","redux/reducers/recoveryPasswordReducer.ts","redux/reducers/enterNewPasswordReducer.ts","redux/reducers/profileReducer.ts","index.tsx","common/SuperInput/SuperInput.module.scss"],"names":["module","exports","SuperCheckbox","type","onChange","onChangeChecked","children","className","spanClassName","restProps","id","name","e","currentTarget","checked","s","checkBox","disabled","htmlFor","SuperButton","red","finalClassName","button","default","SuperInput","onChangeText","onKeyPress","onEnter","error","input","errorInput","superInput","placeholder","Test","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","login","state","registration","recoveryPassword","enterNewPassword","profile","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,OAAS,8B,mBCA3BD,EAAOC,QAAU,CAAC,SAAW,kC,+JC6CdC,EAnCyC,SAAC,GASpD,EAPDC,KAOE,IANFC,EAMC,EANDA,SAAUC,EAMT,EANSA,gBAEVC,GAIC,EALDC,UAKC,EALUC,cAKV,EAJDF,UAEGG,EAEF,4FAQH,OACE,qCACE,mCACEN,KAAM,WACNO,GAAI,WACJC,KAAM,WACNP,SAbmB,SAACQ,GACxBR,GAAYA,EAASQ,GACrBP,GAAmBA,EAAgBO,EAAEC,cAAcC,UAY/CP,UAAWQ,IAAEC,SACbC,UAAU,GAENR,IAELH,GAAY,+BAAOA,IACpB,uBAAOY,QAAS,iB,iBCfPC,EAhBqC,SAAC,GAK/C,IAHFC,EAGC,EAHDA,IAAKb,EAGJ,EAHIA,UACFE,EAEF,mCACGY,EAAc,UAAMN,IAAEO,OAAR,YAAkBF,EAAML,IAAEK,IAAML,IAAEQ,QAAlC,YAA6ChB,GAEjE,OACE,oCACEA,UAAWc,GACPZ,K,gBCqCKe,EA3CuC,SAAC,GAUlD,EARDrB,KAQC,EAPDC,SAOC,EAPSqB,aAOT,EANDC,WAMC,EANWC,QAMV,IALFC,EAKC,EALDA,MACArB,EAIC,EAJDA,UAAWC,EAIV,EAJUA,cAIV,6GAcqB,UAAMO,IAAEa,MAAR,YAAiBpB,GAAgC,IAChD,UAAMO,IAAEc,MAAR,YAAiBD,EAAQb,IAAEe,WAAaf,IAAEgB,WAA1C,YAAwDxB,GAEjF,OACE,qCASE,uBAAOJ,KAAK,OAAOI,UAAWQ,IAAEc,MAAOG,YAAa,aACnDJ,GAAS,+BAAOA,QCtCRK,EAVF,WACX,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,mDACA,cAAC,EAAD,QCESC,MARf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACE,cAAC,EAAD,OCOS4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCFVQ,EAAWC,YAAgB,CAC7BC,MCR0B,WAA8B,IAA7BC,EAA4B,uDAApB,GACnC,OAAOA,GDQPC,aETiC,WAA8B,IAA7BD,EAA4B,uDAApB,GAC1C,OAAOA,GFSPE,iBGVqC,WAA8B,IAA7BF,EAA4B,uDAApB,GAC9C,OAAOA,GHUPG,iBIXqC,WAA8B,IAA7BH,EAA4B,uDAApB,GAC9C,OAAOA,GJWPI,QKZ4B,WAA8B,IAA7BJ,EAA4B,uDAApB,GACrC,OAAOA,KLcEK,EAAQC,YAAYT,GMN/BU,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGFI,SAASC,eAAe,SAG5BtB,K,kBCjBAnC,EAAOC,QAAU,CAAC,MAAQ,6B","file":"static/js/main.11d4d146.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SuperButton_button__2GJEL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkBox\":\"SuperCheckBox_checkBox__3zDOA\"};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckBox.module.scss'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n  onChangeChecked?: (checked: boolean) => void\r\n  spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n  {\r\n    type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n    onChange, onChangeChecked,\r\n    className, spanClassName,\r\n    children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n    ...restProps// все остальные пропсы попадут в объект restProps\r\n  }\r\n) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    onChange && onChange(e)\r\n    onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n  }\r\n\r\n  // const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type={'checkbox'}\r\n        id={'checkbox'}\r\n        name={'checkbox'}\r\n        onChange={onChangeCallback}\r\n        className={s.checkBox}\r\n        disabled={false}\r\n\r\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n      />\r\n      {children && <span>{children}</span>}\r\n      <label htmlFor={'checkbox'}></label>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.scss'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n  red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n  {\r\n    red, className,\r\n    ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n  }\r\n) => {\r\n  const finalClassName = `${s.button} ${red ? s.red : s.default} ${className}`\r\n\r\n  return (\r\n    <button\r\n      className={finalClassName}\r\n      {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n    />\r\n  )\r\n}\r\n\r\nexport default SuperButton","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInput.module.scss'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n  onChangeText?: (value: string) => void\r\n  onEnter?: () => void\r\n  error?: string\r\n  spanClassName?: string\r\n}\r\n\r\nconst SuperInput: React.FC<SuperInputTextPropsType> = (\r\n  {\r\n    type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n    onChange, onChangeText,\r\n    onKeyPress, onEnter,\r\n    error,\r\n    className, spanClassName,\r\n\r\n    ...restProps// все остальные пропсы попадут в объект restProps\r\n  }\r\n) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    onChange // если есть пропс onChange\r\n    && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n    onChangeText && onChangeText(e.currentTarget.value)\r\n  }\r\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    onKeyPress && onKeyPress(e);\r\n\r\n    onEnter // если есть пропс onEnter\r\n    && e.key === 'Enter' // и если нажата кнопка Enter\r\n    && onEnter() // то вызвать его\r\n  }\r\n\r\n  const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n  const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n  return (\r\n    <>\r\n      {/*<input*/}\r\n      {/*  type={'text'}*/}\r\n      {/*  onChange={onChangeCallback}*/}\r\n      {/*  onKeyPress={onKeyPressCallback}*/}\r\n      {/*  // className={finalInputClassName}*/}\r\n\r\n      {/*  {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)*/}\r\n      {/*/>*/}\r\n      <input type='text' className={s.input} placeholder={'Enter...'}/>\r\n      {error && <span>{error}</span>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SuperInput\r\n","import React from \"react\";\r\nimport SuperCheckbox from \"../../common/SuperCheckBox/SuperCheckBox\";\r\nimport SuperButton from \"../../common/SuperButton/SuperButton\";\r\nimport SuperInput from \"../../common/SuperInput/SuperInput\";\r\n\r\nconst Test = () => {\r\n  return (\r\n    <>\r\n      <SuperInput></SuperInput>\r\n      <SuperButton>Кнопка</SuperButton>\r\n      <SuperCheckbox></SuperCheckbox>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Test","import React from 'react';\nimport './App.css';\nimport Test from \"./component/Test/Test\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Test/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {loginReducer} from \"./reducers/loginReducer\";\r\nimport {profileReducer} from \"./reducers/profileReducer\";\r\nimport {registrationReducer} from \"./reducers/registrationReducer\";\r\nimport {recoveryPasswordReducer} from \"./reducers/recoveryPasswordReducer\";\r\nimport {enterNewPasswordReducer} from \"./reducers/enterNewPasswordReducer\";\r\n\r\nlet reducers = combineReducers({\r\n  login: loginReducer,\r\n  registration: registrationReducer,\r\n  recoveryPassword: recoveryPasswordReducer,\r\n  enterNewPassword: enterNewPasswordReducer,\r\n  profile: profileReducer\r\n})\r\n\r\nexport let store = createStore(reducers)","export const loginReducer = (state = {}, action: any) => {\r\n  return state\r\n}","export const registrationReducer = (state = {}, action: any) => {\r\n  return state\r\n}","export const recoveryPasswordReducer = (state = {}, action: any) => {\r\n  return state\r\n}","export const enterNewPasswordReducer = (state = {}, action: any) => {\r\n  return state\r\n}","export const profileReducer = (state = {}, action: any) => {\r\n  return state\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </HashRouter>\n  , document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInput_input__1gKPY\"};"],"sourceRoot":""}